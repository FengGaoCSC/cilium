//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package v1alpha1

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IPAMPoolSpec) DeepEqual(other *IPAMPoolSpec) bool {
	if other == nil {
		return false
	}

	if in.Name != other.Name {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IPAMSpec) DeepEqual(other *IPAMSpec) bool {
	if other == nil {
		return false
	}

	if in.Mode != other.Mode {
		return false
	}
	if in.Pool != other.Pool {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentFQDNGroupSpec) DeepEqual(other *IsovalentFQDNGroupSpec) bool {
	if other == nil {
		return false
	}

	if ((in.FQDNs != nil) && (other.FQDNs != nil)) || ((in.FQDNs == nil) != (other.FQDNs == nil)) {
		in, other := &in.FQDNs, &other.FQDNs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6Locator) DeepEqual(other *IsovalentSRv6Locator) bool {
	if other == nil {
		return false
	}

	if in.Prefix != other.Prefix {
		return false
	}
	if in.Structure != other.Structure {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6LocatorAllocation) DeepEqual(other *IsovalentSRv6LocatorAllocation) bool {
	if other == nil {
		return false
	}

	if in.PoolRef != other.PoolRef {
		return false
	}
	if ((in.Locators != nil) && (other.Locators != nil)) || ((in.Locators == nil) != (other.Locators == nil)) {
		in, other := &in.Locators, &other.Locators
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual((*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6LocatorPool) DeepEqual(other *IsovalentSRv6LocatorPool) bool {
	if other == nil {
		return false
	}

	if in.Spec != other.Spec {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6LocatorPoolSpec) DeepEqual(other *IsovalentSRv6LocatorPoolSpec) bool {
	if other == nil {
		return false
	}

	if in.Prefix != other.Prefix {
		return false
	}
	if in.Structure != other.Structure {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SID) DeepEqual(other *IsovalentSRv6SID) bool {
	if other == nil {
		return false
	}

	if in.Addr != other.Addr {
		return false
	}
	if in.Structure != other.Structure {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDAllocation) DeepEqual(other *IsovalentSRv6SIDAllocation) bool {
	if other == nil {
		return false
	}

	if in.PoolRef != other.PoolRef {
		return false
	}
	if ((in.SIDs != nil) && (other.SIDs != nil)) || ((in.SIDs == nil) != (other.SIDs == nil)) {
		in, other := &in.SIDs, &other.SIDs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual((*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDInfo) DeepEqual(other *IsovalentSRv6SIDInfo) bool {
	if other == nil {
		return false
	}

	if in.SID != other.SID {
		return false
	}

	if in.Owner != other.Owner {
		return false
	}
	if in.MetaData != other.MetaData {
		return false
	}
	if in.Behavior != other.Behavior {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDManager) DeepEqual(other *IsovalentSRv6SIDManager) bool {
	if other == nil {
		return false
	}

	if !in.Spec.DeepEqual(&other.Spec) {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDManagerSpec) DeepEqual(other *IsovalentSRv6SIDManagerSpec) bool {
	if other == nil {
		return false
	}

	if ((in.LocatorAllocations != nil) && (other.LocatorAllocations != nil)) || ((in.LocatorAllocations == nil) != (other.LocatorAllocations == nil)) {
		in, other := &in.LocatorAllocations, &other.LocatorAllocations
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual((*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDManagerStatus) DeepEqual(other *IsovalentSRv6SIDManagerStatus) bool {
	if other == nil {
		return false
	}

	if ((in.SIDAllocations != nil) && (other.SIDAllocations != nil)) || ((in.SIDAllocations == nil) != (other.SIDAllocations == nil)) {
		in, other := &in.SIDAllocations, &other.SIDAllocations
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual((*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IsovalentSRv6SIDStructure) DeepEqual(other *IsovalentSRv6SIDStructure) bool {
	if other == nil {
		return false
	}

	if in.LocatorBlockLenBits != other.LocatorBlockLenBits {
		return false
	}
	if in.LocatorNodeLenBits != other.LocatorNodeLenBits {
		return false
	}
	if in.FunctionLenBits != other.FunctionLenBits {
		return false
	}
	if in.ArgumentLenBits != other.ArgumentLenBits {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PodNetworkSpec) DeepEqual(other *PodNetworkSpec) bool {
	if other == nil {
		return false
	}

	if in.IPAM != other.IPAM {
		return false
	}

	if ((in.Routes != nil) && (other.Routes != nil)) || ((in.Routes == nil) != (other.Routes == nil)) {
		in, other := &in.Routes, &other.Routes
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *RouteSpec) DeepEqual(other *RouteSpec) bool {
	if other == nil {
		return false
	}

	if in.Destination != other.Destination {
		return false
	}
	if in.Gateway != other.Gateway {
		return false
	}

	return true
}

name: ClusterMesh with Overlapping PodCIDR (ci-multicluster)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  workflow_dispatch:
    inputs:
      PR-number:
        description: "Pull request number."
        required: true
      context-ref:
        description: "Context in which the workflow runs. If PR is from a fork, will be the PR target branch (general case). If PR is NOT from a fork, will be the PR branch itself (this allows committers to test changes to workflows directly from PRs)."
        required: true
      SHA:
        description: "SHA under test (head of the PR branch)."
        required: true
      extra-args:
        description: "[JSON object] Arbitrary arguments passed from the trigger comment via regex capture group. Parse with 'fromJson(inputs.extra-args).argName' in workflow."
        required: false
        default: '{}'
  # Run every 6 hours
  schedule:
    - cron:  '0 3/6 * * *'

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read
  # To allow retrieving information from the PR API
  pull-requests: read
  # To be able to set commit status
  statuses: write

concurrency:
  # Structure:
  # - Workflow name
  # - Event type
  # - A unique identifier depending on event type:
  #   - schedule: SHA
  #   - workflow_dispatch: PR number
  #
  # This structure ensures a unique concurrency group name is generated for each
  # type of testing, such that re-runs will cancel the previous run.
  group: |
    ${{ github.workflow }}
    ${{ github.event_name }}
    ${{
      (github.event_name == 'schedule' && github.sha) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.PR-number)
    }}
  cancel-in-progress: true

env:
  # renovate: datasource=github-releases depName=kubernetes-sigs/kind
  kind_version: v0.20.0
  # renovate: datasource=docker depName=quay.io/cilium/kindest-node
  k8s_version: v1.27.1
  # renovate: datasource=github-releases depName=cilium/cilium-cli
  cilium_cli_version: v0.15.8
  cilium_cli_ci_version:
  clusterName1: cluster1-${{ github.run_id }}
  clusterName2: cluster2-${{ github.run_id }}
  contextName1: kind-cluster1-${{ github.run_id }}
  contextName2: kind-cluster2-${{ github.run_id }}

jobs:
  commit-status-start:
    runs-on: ubuntu-latest
    steps:
      - name: Set initial commit status
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        with:
          sha: ${{ inputs.SHA || github.sha }}

  installation-and-connectivity:
    name: Setup & Test
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout context ref
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      with:
        ref: ${{ inputs.context-ref || github.sha }}
        persist-credentials: false

    - name: Set Environment Variables
      uses: ./.github/actions/set-env-variables

    - name: Set up job variables for GHA environment
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          SHA="${{ inputs.SHA }}"
        else
          SHA="${{ github.sha }}"
        fi

        # bpf.masquerade is disabled due to #23283
        CILIUM_INSTALL_DEFAULTS="--chart-directory=install/kubernetes/cilium \
          --helm-set=debug.enabled=true \
          --helm-set=image.repository=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/cilium-ci \
          --helm-set=image.useDigest=false \
          --helm-set=image.tag=${SHA} \
          --helm-set=operator.image.repository=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/operator \
          --helm-set=operator.image.suffix=-ci \
          --helm-set=operator.image.tag=${SHA} \
          --helm-set=operator.image.useDigest=false \
          --helm-set=bpf.masquerade=false \
          --helm-set=bpf.monitorAggregation=none \
          --helm-set=clustermesh.useAPIServer=true \
          --helm-set=clustermesh.apiserver.image.override=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/clustermesh-apiserver-ci:${SHA} \
          --helm-set=clustermesh.apiserver.image.useDigest=false \
          --helm-set=enterprise.clustermesh.enableOverlappingPodCIDRSupport=true \
          --helm-set=socketLB.enabled=true \
          --helm-set=socketLB.hostNamespaceOnly=true \
          --helm-set=endpointHealthChecking.enabled=false \
          --helm-set=endpointStatus.enabled=true \
          --helm-set=endpointStatus.status=policy \
        "

        CILIUM_INSTALL_TUNNEL="--helm-set=tunnel=vxlan"

        CILIUM_INSTALL_IPFAMILY="--helm-set=ipv4.enabled=true --helm-set=ipv6.enabled=false"
        KIND_POD_CIDR_1="10.242.0.0/16"
        KIND_SVC_CIDR_1="10.243.0.0/16"
        KIND_POD_CIDR_2="10.242.0.0/16"
        KIND_SVC_CIDR_2="10.243.0.0/16"

        CONNECTIVITY_TEST_DEFAULTS="--hubble=false --flow-validation=disabled --external-target=google.com --collect-sysdump-on-failure"

        echo cilium_install_defaults="${CILIUM_INSTALL_DEFAULTS} ${CILIUM_INSTALL_TUNNEL} ${CILIUM_INSTALL_IPFAMILY}" >> $GITHUB_OUTPUT
        echo connectivity_test_defaults=${CONNECTIVITY_TEST_DEFAULTS} >> $GITHUB_OUTPUT

        echo kind_pod_cidr_1=${KIND_POD_CIDR_1} >> $GITHUB_OUTPUT
        echo kind_svc_cidr_1=${KIND_SVC_CIDR_1} >> $GITHUB_OUTPUT
        echo kind_pod_cidr_2=${KIND_POD_CIDR_2} >> $GITHUB_OUTPUT
        echo kind_svc_cidr_2=${KIND_SVC_CIDR_2} >> $GITHUB_OUTPUT

        echo sha=${SHA} >> $GITHUB_OUTPUT

    - name: Install Cilium CLI
      uses: cilium/cilium-cli@7f33713a0710a1fff76cfe1b7fd7fbaea2ce7977 # v0.15.8
      with:
        release-version: ${{ env.cilium_cli_version }}
        ci-version: ${{ env.cilium_cli_ci_version }}

    - name: Generate Kind configuration files
      run: |
        K8S_VERSION=${{ env.k8s_version }} \
          PODCIDR=${{ steps.vars.outputs.kind_pod_cidr_1 }} \
          SVCCIDR=${{ steps.vars.outputs.kind_svc_cidr_1 }} \
          IPFAMILY=ipv4 \
          KUBEPROXYMODE=none \
          envsubst < ./.github/kind-config.yaml.tmpl > ./.github/kind-config-cluster1.yaml

        K8S_VERSION=${{ env.k8s_version }} \
          PODCIDR=${{ steps.vars.outputs.kind_pod_cidr_2 }} \
          SVCCIDR=${{ steps.vars.outputs.kind_svc_cidr_2 }} \
          IPFAMILY=ipv4 \
          KUBEPROXYMODE=none \
          envsubst < ./.github/kind-config.yaml.tmpl > ./.github/kind-config-cluster2.yaml

    - name: Create Kind cluster 1
      uses: helm/kind-action@dda0770415bac9fc20092cacbc54aa298604d140 # v1.8.0
      with:
        cluster_name: ${{ env.clusterName1 }}
        version: ${{ env.kind_version }}
        config: ./.github/kind-config-cluster1.yaml
        wait: 0 # The control-plane never becomes ready, since no CNI is present

    - name: Create Kind cluster 2
      uses: helm/kind-action@dda0770415bac9fc20092cacbc54aa298604d140 # v1.8.0
      with:
        cluster_name: ${{ env.clusterName2 }}
        version: ${{ env.kind_version }}
        config: ./.github/kind-config-cluster2.yaml
        wait: 0 # The control-plane never becomes ready, since no CNI is present

    - name: Wait for images to be available
      timeout-minutes: 20
      shell: bash
      run: |
        for image in cilium-ci operator-generic-ci hubble-relay-ci clustermesh-apiserver-ci ; do
          until docker manifest inspect quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/$image:${{ steps.vars.outputs.sha }} &> /dev/null; do sleep 45s; done
        done

    # Warning: since this is a privileged workflow, subsequent workflow job
    # steps must take care not to execute untrusted code.
    - name: Checkout pull request branch (NOT TRUSTED)
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      with:
        ref: ${{ steps.vars.outputs.sha }}
        persist-credentials: false

    - name: Install Cilium in cluster1
      run: |
        # Explicitly configure the NodePort to make sure that it is different in
        # each cluster, to workaround #24692
        cilium --context ${{ env.contextName1 }} install \
        ${{ steps.vars.outputs.cilium_install_defaults }} \
          --helm-set cluster.name=${{ env.clusterName1 }} \
          --helm-set cluster.id=1 \
          --helm-set clustermesh.apiserver.service.nodePort=32379

    - name: Copy the Cilium CA secret to cluster2, as they must match
      run: |
        kubectl --context ${{ env.contextName1 }} get secret -n kube-system cilium-ca -o yaml |
          kubectl --context ${{ env.contextName2 }} create -f -

    - name: Install Cilium in cluster2
      run: |
        # Explicitly configure the NodePort to make sure that it is different in
        # each cluster, to workaround #24692
        cilium --context ${{ env.contextName2 }} install \
          ${{ steps.vars.outputs.cilium_install_defaults }} \
          --helm-set cluster.name=${{ env.clusterName2 }} \
          --helm-set cluster.id=255 \
          --helm-set clustermesh.apiserver.service.nodePort=32380

    - name: Wait for cluster mesh status to be ready
      run: |
        cilium --context ${{ env.contextName1 }} status --wait
        cilium --context ${{ env.contextName2 }} status --wait
        cilium --context ${{ env.contextName1 }} clustermesh status --wait
        cilium --context ${{ env.contextName2 }} clustermesh status --wait

    - name: Connect clusters
      run: |
        cilium --context ${{ env.contextName1 }} clustermesh connect --destination-context ${{ env.contextName2 }}

    - name: Wait for cluster mesh status to be ready
      run: |
        cilium --context ${{ env.contextName1 }} status --wait
        cilium --context ${{ env.contextName2 }} status --wait
        cilium --context ${{ env.contextName1 }} clustermesh status --wait
        cilium --context ${{ env.contextName2 }} clustermesh status --wait

    - name: Deploy required resources
      run: |
        cat << EOF > netshoot.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: netshoot
          labels:
            app: netshoot
        spec:
          nodeName: ${{ env.clusterName1 }}-worker
          containers:
          - name: netshoot
            image: nicolaka/netshoot:v0.9
            command: ["sleep", "infinite"]
        EOF
        cat << EOF > httpbin.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: httpbin
          labels:
            app: httpbin
        spec:
          nodeName: ${{ env.clusterName2 }}-worker
          containers:
          - name: httpbin
            image: kennethreitz/httpbin
        EOF
        cat << EOF > httpbin-service.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name: httpbin-service
          annotations:
            service.cilium.io/global: "true"
        spec:
          type: ClusterIP
          selector:
            app: httpbin
          ports:
            - protocol: TCP
              port: 80
              targetPort: 80
        EOF
        cat << EOF > network-policy-egress.yaml
        apiVersion: "cilium.io/v2"
        kind: CiliumNetworkPolicy
        metadata:
          name: "allow-cross-cluster-egress"
        spec:
          endpointSelector:
            matchLabels:
              app: netshoot
              io.cilium.k8s.policy.cluster: ${{ env.clusterName1 }}
          egress:
          # Allow inter-cluster communication with httpbin service
          - toEndpoints:
            - matchLabels:
                app: httpbin
                io.cilium.k8s.policy.cluster: ${{ env.clusterName2 }}
            toPorts:
            - ports:
              - port: "80"
                protocol: TCP
          # Allow name resolution
          - toEndpoints:
            - matchLabels:
                k8s-app: kube-dns
                io.kubernetes.pod.namespace: kube-system
            toPorts:
            - ports:
              - port: "53"
                protocol: ANY
        EOF
        cat << EOF > network-policy-ingress.yaml
        apiVersion: "cilium.io/v2"
        kind: CiliumNetworkPolicy
        metadata:
          name: "allow-cross-cluster-ingress"
        spec:
          endpointSelector:
            matchLabels:
              app: httpbin
              io.cilium.k8s.policy.cluster: ${{ env.clusterName2 }}
          ingress:
          - fromEndpoints:
            - matchLabels:
                app: netshoot
                io.cilium.k8s.policy.cluster: ${{ env.clusterName1 }}
        EOF

        kubectl --context ${{ env.contextName1 }} apply -f netshoot.yaml
        kubectl --context ${{ env.contextName2 }} apply -f httpbin.yaml
        kubectl --context ${{ env.contextName1 }} apply -f httpbin-service.yaml
        kubectl --context ${{ env.contextName2 }} apply -f httpbin-service.yaml
        kubectl --context ${{ env.contextName1 }} apply -f network-policy-egress.yaml
        kubectl --context ${{ env.contextName2 }} apply -f network-policy-ingress.yaml
        kubectl --context ${{ env.contextName1 }} wait pods -l app=netshoot --for condition=Ready --timeout=300s
        kubectl --context ${{ env.contextName2 }} wait pods -l app=httpbin --for condition=Ready --timeout=300s
        kubectl --context ${{ env.contextName1 }} wait --for=jsonpath='{.status.policy.egress.enforcing}'=true cep netshoot --timeout=300s
        kubectl --context ${{ env.contextName2 }} wait --for=jsonpath='{.status.policy.ingress.enforcing}'=true cep httpbin --timeout=300s

    - name: Ensure inter-cluster communication over global service with L3/L4 policy is working correctly
      run: |
        # Source address of the request should be an IP of the node that the source Pod is running on
        EXPECT=$(docker inspect ${{ env.clusterName1 }}-worker | jq -r '.[0].NetworkSettings.Networks["kind"].IPAddress')

        # Make a request to service and get origin IP address returned from server
        GOT=$(kubectl --context ${{ env.contextName1 }} exec -it netshoot -- curl -s http://httpbin-service.default.svc.cluster.local/get | jq -r .origin)

        # Check if the source address is an expected one or not. If it is expected one that means...
        # 1. Basic connectivity over global service is working
        # 2. Egress network policy was correctly applied
        # 3. Inter-cluster SNAT happened
        # 4. Ingress network policy was correctly applied even if we lose the real source IP
        if [ $GOT != $EXPECT ]; then
          echo "Connectivity test failed. Expect: ${EXPECT}, Got: ${GOT}"
          exit 1
        fi

    - name: Ensure intra-cluster communication is working as is
      run: |
        cilium --context ${{ env.contextName1 }} connectivity test ${{ steps.vars.outputs.connectivity_test_defaults }}

    - name: Post-test information gathering
      if: ${{ !success() }}
      run: |
        cilium --context ${{ env.contextName1 }} status
        cilium --context ${{ env.contextName1 }} clustermesh status
        cilium --context ${{ env.contextName2 }} status
        cilium --context ${{ env.contextName2 }} clustermesh status

        kubectl config use-context ${{ env.contextName1 }}
        kubectl get pods --all-namespaces -o wide
        cilium sysdump --output-filename cilium-sysdump-context1-final

        kubectl config use-context ${{ env.contextName2 }}
        kubectl get pods --all-namespaces -o wide
        cilium sysdump --output-filename cilium-sysdump-context2-final
      shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

    - name: Upload artifacts
      if: ${{ !success() }}
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
      with:
        name: cilium-sysdumps
        path: cilium-sysdump-*.zip
        retention-days: 5

  commit-status-final:
    if: ${{ always() }}
    needs: installation-and-connectivity
    runs-on: ubuntu-latest
    steps:
      - name: Set final commit status
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        with:
          sha: ${{ inputs.SHA || github.sha }}
          status: ${{ needs.installation-and-connectivity.result }}
